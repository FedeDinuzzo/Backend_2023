paths:
  /api/users/:
    get:
      summary: "Consulta todos los usuarios"
      tags: 
        - Users
      responses:
        "200":
          description: "Usuarios encontrados"
          content: 
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#components/schemas/User"
        "500":
          description: "Error del servidor al obtener los usuarios"
  /api/users/{uid}:
    get:
      summary: "Consulta un usuario dado su id"
      tags: 
        - Users
      parameters:
      - name: uid
        in: path
        required: true
        description: "Id del usuario solicitado"
        schema: 
          $type: String
      responses:
        "200":
          description: "Usuario encontrado"
          content: 
            application/json:
              schema:
                $ref: "#components/schemas/User"
components:
  schemas:
    User: 
      type: object
      properties: 
        _id:
          type: ObjectId
          description: "Id autogenerado"
        first_name:
          type: string
          description: "Nombre del usuario"
        last_name:
          type: string
          description: "Apellido del usuario"
        email:
          type: string
          description: "Email del usuario"
        password:
          type: string
          description: "Contrase√±a del usuario"
        rol:
          type: string
          description: "Rol del usuario"
        pets:
          type: array
          description: "Mascotas del usuario"
      example: 
        _id: ObjectId("12bb12bb12bb12bb12bb12bb")
        first_name: Cristian
        last_name: Cortina
        email: cris@cor.com
        password: 1jsdf7234ku
        role: User
        pets: [ObjectId("13bb13bb13bb13bb13bb13bb")]